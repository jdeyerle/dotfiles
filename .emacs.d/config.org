#+title: Emacs Configuration
#+author: jdeyerle
#+property: header-args:emacs-lisp :tangle ./init.el
#+auto_tangle: t
#+startup: content
#+startup: indent

* Preface

#+begin_quote
"Emacs is a great operating system, but it lacks a good editor" \\
--- Ancient Vim proverb
#+end_quote

There is a running joke in the programming community that Emacs is more of an operating system than an editor. While many consider it a joke, I think it's fair to say that Emacs is more of a productivity environment for hackers. 

Emacs is fully customizable and has excellent editor and IDE support, but its out of the box configuration does not rival modern dev tools. Alternate distributions like [[https://www.spacemacs.org][spacemacs]] and [[https://github.com/doomemacs/doomemacs][Doom Emacs]] do a great job of addressing this issue, but I wanted to take full control over my configuration.

Of course, it would be a sin to build a large configuration file in Emacs and not use [[https://orgmode.org][org-mode]]. This configuration file will automatically be tangled by =Org Babel= and output to [[./init.el][init.el]].

* Package Management

Set up ELPA, MELPA, and Org package repositories and load [[https://github.com/jwiegley/use-package][use-package]] to manage package configuration.

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

* Keep .emacs.d Clean

Move transient files elsewhere so they don't show up as untracked in the Git repo. Load [[https://github.com/emacscollective/no-littering][no-littering]] and [[https://github.com/larstvei/Try][try]] to make keeping things tidy a bit easier.

#+begin_src emacs-lisp
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

(use-package no-littering)

(setq custom-file
      (expand-file-name
       (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory))
(load custom-file 'noerror 'nomessage)

(use-package try)
#+end_src

* Better Defaults

Everyone knows the default Emacs configuration is unusable. Here are some improvements.

#+begin_src emacs-lisp
(use-package emacs
  :bind ("C-x C-b" . ibuffer)
  :hook
  ;; Auto reload dired buffers when the file system changes
  (dired-mode . auto-revert-mode)
  :custom
  (inhibit-startup-message t)
  (visible-bell t)
  (make-backup-files nil)
  :config
  ;; Minor Modes
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (global-display-line-numbers-mode 1)
  (global-hl-line-mode 1)
  (ido-mode 1)
  (column-number-mode 1)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

  (setq-default tab-width 2
                indent-tabs-mode nil)

  (if (display-graphic-p)
      (global-unset-key (kbd "C-x C-z"))))
#+end_src

* My Functions

#+begin_src emacs-lisp
(defun my/find-config ()
  "Opens my emacs config file"
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(defun my/turn-off-line-numbers ()
  (display-line-numbers-mode -1))
#+end_src

* Enhancements

Spruce up emacs a bit.

** Editing

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))

(use-package rainbow-mode
  :hook (prog-mode help-mode org-mode))

(use-package whitespace-cleanup-mode
  :config (global-whitespace-cleanup-mode 1))

(use-package spell-fu)
#+end_src

** Navigation

#+begin_src emacs-lisp
(use-package avy
  :bind (("M-g M-g" . avy-goto-char)
         ("M-g b" . avy-pop-mark)))
#+end_src

** Org

Make sure code blocks mirror the language Major Mode and add auto tangling.

#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . visual-line-mode)
  :custom
  ;; code blocks
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-src-fontify-natively t)
  ;; quote blocks
  (org-fontify-quote-and-verse-blocks t)
  ;; org-edit-special (C-c ')
  (org-src-window-setup 'current-window)
  :config
  ;; org-insert-structure-template (C-c C-,)
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp")))

(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Treemacs

Add [[https://github.com/Alexander-Miller/treemacs][Treemacs]], because having a file explorer is nice.

#+begin_src emacs-lisp
(use-package treemacs
  :custom
  (treemacs-is-never-other-window t)
  (treemacs-width 30)
  :hook (treemacs-mode . my/turn-off-line-numbers)
  :bind (("<f8>" . treemacs)
         ("C-<f8>" . treemacs-select-window)))

(use-package treemacs-icons-dired
  :after treemacs dired
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+end_src

** Web

Use default browser environment variable if it exists.

#+begin_src emacs-lisp
(if-let ((browser (getenv "BROWSER")))
    (setq browse-url-generic-program (executable-find browser)
          browse-url-browser-function 'browse-url-generic))
#+end_src

* Development

Configurations for dev tools and programming languages.

** Git

[[https://magit.vc/manual/magit/][Magit]] is the de facto standard Git client for Emacs.

#+begin_src emacs-lisp
(use-package magit)
#+end_src

** APIs

Add [[https://github.com/tkf/emacs-request][request]] and [[https://github.com/pashky/restclient.el][restclient]] to make working with APIs fast and easy.

#+begin_src emacs-lisp
(use-package request)
(use-package restclient)
#+end_src

** General Configs

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package company
  :hook ((cider-repl-mode
          clojure-mode
          emacs-lisp-mode
          ielm-mode) . company-mode))
#+end_src

** Terminal Modes

Make terminal modes a bit better and add [[https://github.com/akermu/emacs-libvterm][vterm]].

#+begin_src emacs-lisp
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))

(use-package term
  :hook (term-mode . my/turn-off-line-numbers))

(use-package vterm
  :commands vterm
  :hook (vterm-mode . my/turn-off-line-numbers))

(use-package eshell
  :hook ((eshell-mode . my/turn-off-line-numbers)
         (eshell-pre-command . eshell-save-some-history))
  :custom
  (eshell-history-size 10000)
  (eshell-buffer-maximum-lines 10000)
  (eshell-hist-ignoredups t))

(use-package eshell-git-prompt
  :config
  (eshell-git-prompt-use-theme 'multiline2))
#+end_src

** Languages

Language specific configurations.

*** Meta Lisp

Useful packages for editing any Lisp.

#+begin_src emacs-lisp
(use-package parinfer-rust-mode
  :custom (parinfer-rust-auto-download t)
  :hook (emacs-lisp-mode clojure-mode))
#+end_src

*** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode)
(use-package cider
  :hook (cider-repl-mode . my/turn-off-line-numbers))
#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'company-mode)
(add-hook 'ielm-mode-hook 'my/turn-off-line-numbers)

(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h o" . helpful-symbol)
         ("C-h C" . helpful-command)
         ("C-c C-d" . helpful-at-point)))
#+end_src

*** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)))
  ;;:custom (markdown-command "multimarkdown"))
#+end_src

*** Shell

Most modern style guides recommend using [[https://github.com/koalaman/shellcheck][ShellCheck]]. This will need to be installed for [[https://github.com/federicotdn/flymake-shellcheck][flymake-shellcheck]] to work.

#+begin_src emacs-lisp
(use-package flymake-shellcheck
  :commands flymake-shellcheck-load
  :init (add-hook 'sh-mode-hook 'flymake-shellcheck-load))

;; set tab width
(setq sh-basic-offset 2)
#+end_src

* Theme

Keep it simple with [[https://github.com/doomemacs/themes][doom-themes]], [[https://github.com/seagle0128/doom-modeline][doom-modeline]] and [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].
Be sure to run =M-x all-the-icons-install-fonts=.

#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-themes-treemacs-theme "doom-colors")
  :config
  (load-theme 'doom-material-dark t)

  (doom-themes-visual-bell-config)
  (doom-themes-org-config)
  (doom-themes-treemacs-config))

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(use-package all-the-icons
  :if (display-graphic-p))
#+end_src
