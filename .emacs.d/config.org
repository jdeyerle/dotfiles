#+title: Emacs Configuration
#+author: jdeyerle
#+property: header-args:emacs-lisp :tangle ./.config.el
#+startup: content
#+startup: indent

* Package Management

Set up ELPA, MELPA, and Org package repositories and load [[https://github.com/jwiegley/use-package][use-package]] to manage package configuration.  

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

* Keep .emacs.d Clean

Move transient files elsewhere so they don't show up as untracked in the Git repo. Load [[https://github.com/emacscollective/no-littering][no-littering]] and [[https://github.com/larstvei/Try][try]] to make this a bit easier.

#+begin_src emacs-lisp
(setq  user-emacs-directory (expand-file-name "~/.cache/emacs/")
       url-history-file (expand-file-name "url/history" user-emacs-directory))

(use-package no-littering)

(setq custom-file
      (expand-file-name
       (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory))
(load custom-file 'noerror 'nomessage)

(use-package try)
#+end_src

* Better Defaults

Everyone knows the default Emacs configuration is unusable. Here are some improvements.

#+begin_src emacs-lisp
(use-package emacs
  :hook
  ;; Auto reload dired buffers when the file system changes
  (dired-mode . auto-revert-mode)
  :custom
  (inhibit-startup-message t)
  (visible-bell t)
  (make-backup-files nil)
  :config
  ;; Minor Modes
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (global-display-line-numbers-mode 1)
  (global-hl-line-mode 1)
  (ido-mode 1)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1))
#+end_src

* Org

Make sure code blocks mirror the language Major Mode.

#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . visual-line-mode)
  :custom
  ;; Code blocks
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-src-fontify-natively t)
  ;; org-edit-special (C-c ')
  (org-src-window-setup 'current-window)
  :config
  ;; org-insert-structure-template (C-c C-,)
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp")))
#+end_src

* Development

Configurations for dev tools and programming languages.

** Git

[[https://magit.vc/manual/magit/][Magit]] is the de facto standard Git client for Emacs.

#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Languages

Language specific configurations and shared language features.

*** General Configs

Add some color to make code easier to visually inspect.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :hook
  (emacs-lisp-mode . rainbow-mode)
  (help-mode . rainbow-mode)
  (org-mode . rainbow-mode))
#+end_src

*** Shell

Most modern style guides recommend using [[https://github.com/koalaman/shellcheck][ShellCheck]]. This will need to be installed for [[https://github.com/federicotdn/flymake-shellcheck][flymake-shellcheck]] to work.

#+begin_src emacs-lisp
(use-package flymake-shellcheck
  :commands flymake-shellcheck-load
  :init (add-hook 'sh-mode-hook 'flymake-shellcheck-load))

;; set tab width
(setq sh-basic-offset 2)
#+end_src

* Theme

Keep it simple with [[https://github.com/doomemacs/themes][doom-themes]], [[https://github.com/seagle0128/doom-modeline][doom-modeline]] and [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].

#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  (load-theme 'doom-material-dark t)

  (doom-themes-visual-bell-config)
  (doom-themes-org-config))

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(use-package all-the-icons
  :if (display-graphic-p))
#+end_src
